!* ========================================================================== *
!*                                                                            *
!* Copyright (C) 2022 Intel Corporation                                       *
!* This file is part of the DMR library.                                      *
!*                                                                            *
!* For information on the license, see the LICENSE file.                      *
!* Further information: https://github.com/giacrossi/dmr/                     *
!* SPDX-License-Identifier: BSD-3-Clause                                      *
!*                                                                            *
!* ========================================================================== *
!* Giacomo Rossi (Intel Corporation)                                          *
!* ========================================================================== *

program test_dmr_target_is_present
   use omp_lib,         only : omp_get_default_device
   use dmr,             only : ompx_target_is_present_f
   use dmr_environment

   implicit none

{%- for t in types %}
{%- for p in kinds[t] %}
{%- if p.name == '128' %}
#if defined _real128
{%- endif %}
{%- if dimensions == 1 %}
   {{t}}({{keywords[t][2]}}{{p.key}}), allocatable :: host_data_{{keywords[t][1]}}{{p.name}}_1(:)
{%- else %}
   {%- if dimensions > 4 %}
   {{t}}({{keywords[t][2]}}{{p.key}}), allocatable ::{% for dd in range(1,5) %} host_data_{{keywords[t][1]}}{{p.name}}_{{dd}}({% for ddd in range(dd) %}:{% if not loop.last %}, {%- endif %}{% endfor %}){% if not loop.last %}, {% else %}, &{%- endif %}{% endfor %}
                                       {% for dd in range(5,dimensions+1) %} host_data_{{keywords[t][1]}}{{p.name}}_{{dd}}({% for ddd in range(dd) %}:{% if not loop.last %}, {%- endif %}{% endfor %}){% if not loop.last %}, {%- endif %}{% endfor %}
   {%- else %}
   {{t}}({{keywords[t][2]}}{{p.key}}), allocatable ::{% for dd in range(1,5) %} host_data_{{keywords[t][1]}}{{p.name}}_{{dd}}({% for ddd in range(dd) %}:{% if not loop.last %}, {%- endif %}{% endfor %}){% if not loop.last %}, {%- endif %}{% endfor %}
   {%- endif %}
{%- endif %}
{%- if p.name == '128' %}
#endif
{%- endif %}
{%- endfor %}
{%- endfor %}

   integer(I4P), parameter :: sz = 10
   integer(I4P) :: ierr=0, test_tot=0, test_not=0, nfail=0
   logical      :: pres

{%- for t in types %}
{%- for p in kinds[t] %}

   !!! DMR Target Is Present {{keywords[t][0]}} tests

{%- if p.name == '128' %}
#if defined _real128
{%- endif %}
{%- for d in range(1,dimensions+1) %}
   allocate(host_data_{{keywords[t][1]}}{{p.name}}_{{d}}({% for dd in range(d) %}sz{% if not loop.last %}, {%- endif %}{% endfor %}), stat=ierr)
   if (ierr/=0) then
      write(0,"(/,a,i5)") "Allocation failed on the host for host_data_{{keywords[t][1]}}{{p.name}}_{{d}}, ierr:", ierr
      write(0,"(/,a)") "DMR Target Is Present test will not be executed"
   else
      !$omp target data map(alloc:host_data_{{keywords[t][1]}}{{p.name}}_{{d}})
      pres = ompx_target_is_present_f(host_data=host_data_{{keywords[t][1]}}{{p.name}}_{{d}}, omp_dev=omp_get_default_device())
      !$omp end target data
      if (pres .and. (.not. ompx_target_is_present_f(host_data=host_data_{{keywords[t][1]}}{{p.name}}_{{d}}, omp_dev=omp_get_default_device()))) then
         test_tot = test_tot + 1
      else
         write(0,"(/,a,i5)") "Test failed for dev_ptr_{{keywords[t][1]}}{{p.name}}_{{d}}"
         nfail = nfail + 1
      endif
   endif
{%- endfor %}
{%- if p.name == '128' %}
#endif
{%- endif %}
{%- endfor %}
{%- endfor %}

  write(0,"(/,a)") "DMR Target Is Present Test SUMMARY:"
  write(0,"(3x,a,i5)") "# tests: ", test_tot
  write(0,"(3x,a,i5)") "# passed: ", test_tot - nfail
  write(0,"(3x,a,i5)") "# failed: ", nfail
  write(0,"(3x,a,i5)") "# not executed for host allocation issues ", test_not
  write(0,"()")
endprogram test_dmr_target_is_present
