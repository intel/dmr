!* ========================================================================== *
!*                                                                            *
!* Copyright (C) 2020 Intel Corporation                                       *
!* This file is part of the DMR library.                                      *
!*                                                                            *
!* For information on the license, see the LICENSE file.                      *
!* Further information: https://github.com/giacrossi/dmr/                     *
!* SPDX-License-Identifier: BSD-3-Clause                                      *
!*                                                                            *
!* ========================================================================== *
!* Giacomo Rossi (Intel Corporation)                                          *
!* ========================================================================== *

submodule (dmr) dmr_target_alloc
   use, intrinsic :: iso_c_binding
   use omp_lib
   use dmr_environment
   use dmr_c_functions

   implicit none

   contains
{% print("") %}
{%- for t in types %}
      ! OpenMP Target Alloc {{keywords[t][0]}} Routines
{%- for p in kinds[t] %}
{%- if p.name == '128' %}
#if defined _real128
{%- endif %}
{%- for d in range(1,dimensions+1) %}
      module subroutine omp_target_alloc_f_{{keywords[t][1]}}{{p.name}}_{{d}}(fptr_dev, dimensions, omp_dev, ierr, bounds)
         implicit none
         {{t}}({{keywords[t][2]}}{{p.key}}), pointer, contiguous, intent(out){% if t=='real' and p.key=='16P' %}{% print('    ')%}{%- elif t=='complex' and p.key=='16P' %}{% print(' ')%}{%- elif t=='real' %}{% print('     ')%}{%- else %}{% print('  ')%}{%- endif %}:: fptr_dev({% for dd in range(d) %}:{% if not loop.last %}, {%- endif %}{% endfor %})
{%- if d == 1 %}
         integer(I8P), intent(in)                        :: dimensions
{%- else %}
         integer(I8P), intent(in)                        :: dimensions({{d}})
{%- endif %}
         integer(I4P), intent(in)                        :: omp_dev
         integer(I4P), intent(out)                       :: ierr
         integer(I8P), intent(in), optional              :: bounds({{d*2}})
         {{t}}({{keywords[t][2]}}{{p.key}}), pointer, contiguous{% if t=='real' and p.key=='16P' %}{% print('                 ')%}{%- elif t=='complex' and p.key=='16P' %}{% print('              ')%}{%- elif t=='real' %}{% print('                  ')%}{%- else %}{% print('               ')%}{%- endif %}:: fptr({% for dd in range(d) %}:{% if not loop.last %}, {%- endif %}{% endfor %})
         type(c_ptr)                                     :: cptr_dev
         integer(kind=c_int)                             :: omp_device

         omp_device = int(omp_dev, c_int)
{% print("") %}
{%- if d == 1 %}
{%- if t == 'complex' %}
         cptr_dev = omp_target_alloc_c(int(2_I8P * dimensions, c_size_t) * byte_size(1{% if not t=='integer' %}.{%- endif %}_{{keywords[t][2]}}{{p.key}}), omp_device)
{%- else %}
         cptr_dev = omp_target_alloc_c(int(dimensions, c_size_t) * byte_size(1{% if not t=='integer' %}.{%- endif %}_{{keywords[t][2]}}{{p.key}}), omp_device)
{%- endif %}
{%- else %}
{%- if t == 'complex' %}
         cptr_dev = omp_target_alloc_c(int(2_I8P * product(dimensions), c_size_t) * byte_size(1{% if not t=='integer' %}.{%- endif %}_{{keywords[t][2]}}{{p.key}}), omp_device)
{%- else %}
         cptr_dev = omp_target_alloc_c(int(product(dimensions), c_size_t) * byte_size(1{% if not t=='integer' %}.{%- endif %}_{{keywords[t][2]}}{{p.key}}), omp_device)
{%- endif %}
{%- endif %}

         if (c_associated(cptr_dev)) then
            if (present(bounds)) then
{%- if d == 1 %}
               call c_f_pointer(cptr_dev, fptr, [dimensions])
{%- else %}
               call c_f_pointer(cptr_dev, fptr, [{% for dd in range(d) %}dimensions({{dd+1}}){% if not loop.last %},{% print(' ') %}{%- endif %}{% endfor %}])
{%- endif %}
               fptr_dev({% for dd in range(0,2*d,2) %}bounds({{dd+1}}):bounds({{dd+2}}){% if not loop.last %},{% print(' ') %}{%- endif %}{% endfor %}) => fptr
            else
{%- if d == 1 %}
               call c_f_pointer(cptr_dev, fptr_dev, [dimensions])
{%- else %}
               call c_f_pointer(cptr_dev, fptr_dev, [{% for dd in range(d) %}dimensions({{dd+1}}){% if not loop.last %},{% print(' ') %}{%- endif %}{% endfor %}])
{%- endif %}
            endif
            ierr = 0
         else
            ierr = 1000
         endif
      endsubroutine omp_target_alloc_f_{{keywords[t][1]}}{{p.name}}_{{d}}
{% print("") %}
{%- endfor %}
{%- if p.name == '128' %}
#endif
{%- endif %}
{%- endfor %}
{% print("") %}
{%- endfor %}

endsubmodule dmr_target_alloc
