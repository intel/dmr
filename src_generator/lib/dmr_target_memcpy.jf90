!* ========================================================================== *
!*                                                                            *
!* Copyright (C) 2020 Intel Corporation                                       *
!* This file is part of the DMR library.                                      *
!*                                                                            *
!* For information on the license, see the LICENSE file.                      *
!* Further information: https://github.com/giacrossi/dmr/                     *
!* SPDX-License-Identifier: BSD-3-Clause                                      *
!*                                                                            *
!* ========================================================================== *
!* Giacomo Rossi (Intel Corporation)                                          *
!* ========================================================================== *

submodule (dmr) dmr_target_memcpy

   implicit none

   contains
{%- for t in types %}
      ! OpenMP Target Memcpy {{keywords[t][0]}} Routines
{%- for p in kinds[t] %}
{%- if p.name == '128' %}
#if defined _real128
{%- endif %}
      module function ompx_target_memcpy_f_{{keywords[t][1]}}{{p.name}}(fptr_dst, fptr_src, dst_off, src_off, &
            omp_dst_dev, omp_src_dev)
         implicit none
         integer(I4P)                                  :: ompx_target_memcpy_f_{{keywords[t][1]}}{{p.name}}
         {{t}}({{keywords[t][2]}}{{p.key}}), contiguous, target, intent(out) :: fptr_dst(..)
         {{t}}({{keywords[t][2]}}{{p.key}}), contiguous, target, intent(in)  :: fptr_src(..)
         integer(I4P), intent(in)                      :: omp_dst_dev, omp_src_dev
         integer(I4P), intent(in)                      :: dst_off, src_off
         integer(I8P)                                  :: n_elements
         integer(c_size_t)                             :: total_dim, omp_dst_offset, omp_src_offset
         type(c_ptr)                                   :: cptr_dst, cptr_src
         integer(c_int)                                :: omp_dst_device, omp_src_device

         if (omp_src_dev == omp_get_initial_device()) then
            n_elements = size(fptr_src)
         else
            n_elements = size(fptr_dst)
         endif

         omp_dst_offset = int(dst_off, c_size_t)
         omp_src_offset = int(src_off, c_size_t)
         omp_dst_device = int(omp_dst_dev, c_int)
         omp_src_device = int(omp_src_dev, c_int)

         cptr_dst = c_loc(fptr_dst)
         cptr_src = c_loc(fptr_src)
{% print("") %}
{%- if t == 'complex' %}
         total_dim = int(2_I8P * n_elements * byte_size(1{% if not t=='integer' %}.{%- endif %}_{{keywords[t][2]}}{{p.key}}), c_size_t)
{%- else %}
         total_dim = int(n_elements * byte_size(1{% if not t=='integer' %}.{%- endif %}_{{keywords[t][2]}}{{p.key}}), c_size_t)
{%- endif %}

         ompx_target_memcpy_f_{{keywords[t][1]}}{{p.name}} = int(omp_target_memcpy(cptr_dst, cptr_src, total_dim, omp_dst_offset, omp_src_offset, &
            omp_dst_device, omp_src_device), I4P)
      endfunction ompx_target_memcpy_f_{{keywords[t][1]}}{{p.name}}
{%- if p.name == '128' %}
#endif
{%- endif %}
{% print("") %}
{%- endfor %}
{%- endfor %}

endsubmodule dmr_target_memcpy
